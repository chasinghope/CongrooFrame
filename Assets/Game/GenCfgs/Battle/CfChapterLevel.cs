
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.Battle
{
public sealed partial class CfChapterLevel : Luban.BeanBase
{
    public CfChapterLevel(JSONNode _buf) 
    {
        { if(!_buf["Id"].IsNumber) { throw new SerializationException(); }  Id = _buf["Id"]; }
        { if(!_buf["ChapterId"].IsNumber) { throw new SerializationException(); }  ChapterId = _buf["ChapterId"]; }
        { if(!_buf["ChapterName"].IsNumber) { throw new SerializationException(); }  ChapterName = _buf["ChapterName"]; }
        { if(!_buf["LevelId"].IsNumber) { throw new SerializationException(); }  LevelId = _buf["LevelId"]; }
        { if(!_buf["LevelIconPath"].IsString) { throw new SerializationException(); }  LevelIconPath = _buf["LevelIconPath"]; }
        { if(!_buf["LevelBgPath"].IsString) { throw new SerializationException(); }  LevelBgPath = _buf["LevelBgPath"]; }
        { var __json0 = _buf["waves"]; if(!__json0.IsArray) { throw new SerializationException(); } Waves = new System.Collections.Generic.List<Battle.WaveConfig>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.WaveConfig __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Battle.WaveConfig.DeserializeWaveConfig(__e0);  }  Waves.Add(__v0); }   }
        { var __json0 = _buf["StageRewards"]; if(!__json0.IsArray) { throw new SerializationException(); } StageRewards = new System.Collections.Generic.List<Battle.ItemStuff>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.ItemStuff __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Battle.ItemStuff.DeserializeItemStuff(__e0);  }  StageRewards.Add(__v0); }   }
        { var __json0 = _buf["HangRewards"]; if(!__json0.IsArray) { throw new SerializationException(); } HangRewards = new System.Collections.Generic.List<Battle.ItemStuff>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.ItemStuff __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Battle.ItemStuff.DeserializeItemStuff(__e0);  }  HangRewards.Add(__v0); }   }
        { var __json0 = _buf["SweepRewards"]; if(!__json0.IsArray) { throw new SerializationException(); } SweepRewards = new System.Collections.Generic.List<Battle.ItemStuff>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.ItemStuff __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Battle.ItemStuff.DeserializeItemStuff(__e0);  }  SweepRewards.Add(__v0); }   }
        { var __json0 = _buf["FirstPassRewards"]; if(!__json0.IsArray) { throw new SerializationException(); } FirstPassRewards = new System.Collections.Generic.List<Battle.ItemStuff>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { Battle.ItemStuff __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = Battle.ItemStuff.DeserializeItemStuff(__e0);  }  FirstPassRewards.Add(__v0); }   }
        { var __json0 = _buf["FunctionId"]; if(!__json0.IsArray) { throw new SerializationException(); } FunctionId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  FunctionId.Add(__v0); }   }
    }

    public static CfChapterLevel DeserializeCfChapterLevel(JSONNode _buf)
    {
        return new Battle.CfChapterLevel(_buf);
    }

    /// <summary>
    /// 条目
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 章节id
    /// </summary>
    public readonly int ChapterId;
    /// <summary>
    /// 章节名称
    /// </summary>
    public readonly int ChapterName;
    /// <summary>
    /// 关卡id
    /// </summary>
    public readonly int LevelId;
    /// <summary>
    /// 关卡Icon路径
    /// </summary>
    public readonly string LevelIconPath;
    /// <summary>
    /// 关卡背景路径
    /// </summary>
    public readonly string LevelBgPath;
    /// <summary>
    /// 波次集合
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.WaveConfig> Waves;
    /// <summary>
    /// 波次奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> StageRewards;
    /// <summary>
    /// 挂机奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> HangRewards;
    /// <summary>
    /// 扫荡奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> SweepRewards;
    /// <summary>
    /// 首次通关奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> FirstPassRewards;
    /// <summary>
    /// 功能ID
    /// </summary>
    public readonly System.Collections.Generic.List<int> FunctionId;
   
    public const int __ID__ = 1038358320;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        foreach (var _e in Waves) { _e?.ResolveRef(tables); }
        foreach (var _e in StageRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in HangRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in SweepRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in FirstPassRewards) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ChapterId:" + ChapterId + ","
        + "ChapterName:" + ChapterName + ","
        + "LevelId:" + LevelId + ","
        + "LevelIconPath:" + LevelIconPath + ","
        + "LevelBgPath:" + LevelBgPath + ","
        + "waves:" + Luban.StringUtil.CollectionToString(Waves) + ","
        + "StageRewards:" + Luban.StringUtil.CollectionToString(StageRewards) + ","
        + "HangRewards:" + Luban.StringUtil.CollectionToString(HangRewards) + ","
        + "SweepRewards:" + Luban.StringUtil.CollectionToString(SweepRewards) + ","
        + "FirstPassRewards:" + Luban.StringUtil.CollectionToString(FirstPassRewards) + ","
        + "FunctionId:" + Luban.StringUtil.CollectionToString(FunctionId) + ","
        + "}";
    }
}

}

