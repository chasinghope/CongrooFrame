
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.Battle
{
public sealed partial class CfChapterLevel : Luban.BeanBase
{
    public CfChapterLevel(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        ChapterId = _buf.ReadInt();
        ChapterName = _buf.ReadInt();
        LevelId = _buf.ReadInt();
        LevelIconPath = _buf.ReadString();
        LevelBgPath = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Waves = new System.Collections.Generic.List<Battle.WaveConfig>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.WaveConfig _e0;  _e0 = Battle.WaveConfig.DeserializeWaveConfig(_buf); Waves.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);StageRewards = new System.Collections.Generic.List<Battle.ItemStuff>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.ItemStuff _e0;  _e0 = Battle.ItemStuff.DeserializeItemStuff(_buf); StageRewards.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);HangRewards = new System.Collections.Generic.List<Battle.ItemStuff>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.ItemStuff _e0;  _e0 = Battle.ItemStuff.DeserializeItemStuff(_buf); HangRewards.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SweepRewards = new System.Collections.Generic.List<Battle.ItemStuff>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.ItemStuff _e0;  _e0 = Battle.ItemStuff.DeserializeItemStuff(_buf); SweepRewards.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FirstPassRewards = new System.Collections.Generic.List<Battle.ItemStuff>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Battle.ItemStuff _e0;  _e0 = Battle.ItemStuff.DeserializeItemStuff(_buf); FirstPassRewards.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FunctionId = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); FunctionId.Add(_e0);}}
    }

    public static CfChapterLevel DeserializeCfChapterLevel(ByteBuf _buf)
    {
        return new Battle.CfChapterLevel(_buf);
    }

    /// <summary>
    /// 条目
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 章节id
    /// </summary>
    public readonly int ChapterId;
    /// <summary>
    /// 章节名称
    /// </summary>
    public readonly int ChapterName;
    /// <summary>
    /// 关卡id
    /// </summary>
    public readonly int LevelId;
    /// <summary>
    /// 关卡Icon路径
    /// </summary>
    public readonly string LevelIconPath;
    /// <summary>
    /// 关卡背景路径
    /// </summary>
    public readonly string LevelBgPath;
    /// <summary>
    /// 波次集合
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.WaveConfig> Waves;
    /// <summary>
    /// 波次奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> StageRewards;
    /// <summary>
    /// 挂机奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> HangRewards;
    /// <summary>
    /// 扫荡奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> SweepRewards;
    /// <summary>
    /// 首次通关奖励
    /// </summary>
    public readonly System.Collections.Generic.List<Battle.ItemStuff> FirstPassRewards;
    /// <summary>
    /// 功能ID
    /// </summary>
    public readonly System.Collections.Generic.List<int> FunctionId;
   
    public const int __ID__ = 1038358320;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        foreach (var _e in Waves) { _e?.ResolveRef(tables); }
        foreach (var _e in StageRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in HangRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in SweepRewards) { _e?.ResolveRef(tables); }
        foreach (var _e in FirstPassRewards) { _e?.ResolveRef(tables); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ChapterId:" + ChapterId + ","
        + "ChapterName:" + ChapterName + ","
        + "LevelId:" + LevelId + ","
        + "LevelIconPath:" + LevelIconPath + ","
        + "LevelBgPath:" + LevelBgPath + ","
        + "waves:" + Luban.StringUtil.CollectionToString(Waves) + ","
        + "StageRewards:" + Luban.StringUtil.CollectionToString(StageRewards) + ","
        + "HangRewards:" + Luban.StringUtil.CollectionToString(HangRewards) + ","
        + "SweepRewards:" + Luban.StringUtil.CollectionToString(SweepRewards) + ","
        + "FirstPassRewards:" + Luban.StringUtil.CollectionToString(FirstPassRewards) + ","
        + "FunctionId:" + Luban.StringUtil.CollectionToString(FunctionId) + ","
        + "}";
    }
}

}

