
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.Battle
{
public partial class TBTaskChallenge
{
    private readonly System.Collections.Generic.Dictionary<int, Battle.CfTaskChallenge> _dataMap;
    private readonly System.Collections.Generic.List<Battle.CfTaskChallenge> _dataList;
    
    public TBTaskChallenge(ByteBuf _buf)
    {
        _dataMap = new System.Collections.Generic.Dictionary<int, Battle.CfTaskChallenge>();
        _dataList = new System.Collections.Generic.List<Battle.CfTaskChallenge>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            Battle.CfTaskChallenge _v;
            _v = Battle.CfTaskChallenge.DeserializeCfTaskChallenge(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
    }

    public System.Collections.Generic.Dictionary<int, Battle.CfTaskChallenge> DataMap => _dataMap;
    public System.Collections.Generic.List<Battle.CfTaskChallenge> DataList => _dataList;

    public Battle.CfTaskChallenge GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public Battle.CfTaskChallenge Get(int key) => _dataMap[key];
    public Battle.CfTaskChallenge this[int key] => _dataMap[key];

    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }

}

}

