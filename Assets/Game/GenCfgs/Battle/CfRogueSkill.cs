
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.Battle
{
public sealed partial class CfRogueSkill : Luban.BeanBase
{
    public CfRogueSkill(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { var __json0 = _buf["PreSkills"]; if(!__json0.IsArray) { throw new SerializationException(); } PreSkills = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  PreSkills.Add(__v0); }   }
        { if(!_buf["IsUseBattle"].IsBoolean) { throw new SerializationException(); }  IsUseBattle = _buf["IsUseBattle"]; }
        { if(!_buf["IsInPool"].IsBoolean) { throw new SerializationException(); }  IsInPool = _buf["IsInPool"]; }
        { if(!_buf["Type"].IsString) { throw new SerializationException(); }  Type = _buf["Type"]; }
        { if(!_buf["Param1"].IsString) { throw new SerializationException(); }  Param1 = _buf["Param1"]; }
        { if(!_buf["Param2"].IsString) { throw new SerializationException(); }  Param2 = _buf["Param2"]; }
        { if(!_buf["Param3"].IsString) { throw new SerializationException(); }  Param3 = _buf["Param3"]; }
        { if(!_buf["Param4"].IsString) { throw new SerializationException(); }  Param4 = _buf["Param4"]; }
        { if(!_buf["Param5"].IsString) { throw new SerializationException(); }  Param5 = _buf["Param5"]; }
        { if(!_buf["Desc"].IsString) { throw new SerializationException(); }  Desc = _buf["Desc"]; }
        { if(!_buf["CanStack"].IsBoolean) { throw new SerializationException(); }  CanStack = _buf["CanStack"]; }
        { if(!_buf["Quality"].IsNumber) { throw new SerializationException(); }  Quality = _buf["Quality"]; }
        { if(!_buf["Importance"].IsNumber) { throw new SerializationException(); }  Importance = _buf["Importance"]; }
        { if(!_buf["Pct"].IsNumber) { throw new SerializationException(); }  Pct = _buf["Pct"]; }
        { if(!_buf["Name"].IsNumber) { throw new SerializationException(); }  Name = _buf["Name"]; }
        { if(!_buf["IconPath"].IsString) { throw new SerializationException(); }  IconPath = _buf["IconPath"]; }
    }

    public static CfRogueSkill DeserializeCfRogueSkill(JSONNode _buf)
    {
        return new Battle.CfRogueSkill(_buf);
    }

    /// <summary>
    /// 肉鸽技能id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 前置技能
    /// </summary>
    public readonly System.Collections.Generic.List<int> PreSkills;
    /// <summary>
    /// 仅作用于战斗回合
    /// </summary>
    public readonly bool IsUseBattle;
    /// <summary>
    /// 是否在技能池
    /// </summary>
    public readonly bool IsInPool;
    /// <summary>
    /// 技能类型
    /// </summary>
    public readonly string Type;
    /// <summary>
    /// 参数1
    /// </summary>
    public readonly string Param1;
    /// <summary>
    /// 参数2
    /// </summary>
    public readonly string Param2;
    /// <summary>
    /// 参数3
    /// </summary>
    public readonly string Param3;
    /// <summary>
    /// 参数4
    /// </summary>
    public readonly string Param4;
    /// <summary>
    /// 参数5
    /// </summary>
    public readonly string Param5;
    /// <summary>
    /// 详情
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 是否可叠加
    /// </summary>
    public readonly bool CanStack;
    /// <summary>
    /// 品质
    /// </summary>
    public readonly int Quality;
    /// <summary>
    /// 重要度
    /// </summary>
    public readonly int Importance;
    /// <summary>
    /// 概率
    /// </summary>
    public readonly int Pct;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly int Name;
    /// <summary>
    /// 图片路径
    /// </summary>
    public readonly string IconPath;
   
    public const int __ID__ = -1365188912;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "PreSkills:" + Luban.StringUtil.CollectionToString(PreSkills) + ","
        + "IsUseBattle:" + IsUseBattle + ","
        + "IsInPool:" + IsInPool + ","
        + "Type:" + Type + ","
        + "Param1:" + Param1 + ","
        + "Param2:" + Param2 + ","
        + "Param3:" + Param3 + ","
        + "Param4:" + Param4 + ","
        + "Param5:" + Param5 + ","
        + "Desc:" + Desc + ","
        + "CanStack:" + CanStack + ","
        + "Quality:" + Quality + ","
        + "Importance:" + Importance + ","
        + "Pct:" + Pct + ","
        + "Name:" + Name + ","
        + "IconPath:" + IconPath + ","
        + "}";
    }
}

}

